**What happens when you initialize a repository? Why do you need to do it?

- The repository is ready to have files added to it.
- You still need to add the files, and then commit them (eventually)


**What happens when you initialize a repository? Why do you need to do it?

- The hidden .git folder is created and everything is set up for git to work on the working directory


**How is the staging area different from the working directory and the repository?
**What value do you think it offers?

- The staging area lets you put files on the table as it were to be committed together in a logical bundle.  Not all the changed files need to be committed if they don't relate to the change.


**How can you use the staging area to make sure you have one commit per logical
change?

- It can be used as a holding ground to add relevant files to prior the logical commit.


**What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

- Branches are useful for trying new things, making different versions, etc
- They also help by having the original MAIN branch which can be referred back to for any live changes that may need to happen.


**How do the diagrams help you visualize the branch structure?
- They give you a framework of how things tie together
- They're helpful for visualising relationships between entities


**What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

**What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
